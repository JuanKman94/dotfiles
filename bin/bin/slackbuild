#!/bin/bash
# Install package using SlackBuilds (R) method
#
# Usage: slackbuild <sb pkg>[.tar.gz]

# exit on error
set -e

ARCHIVE="$1"
RED='\033[0;31m'
RESET='\e[0m'
SB_DIR="${SB_DIR:-$HOME/slackbuilds}"
SUDO=""
SLACKBUILDS_DIR="/opt/slackbuilds"

# use sudo if not running as root
[[ $UID -ne 0 ]] && SUDO="sudo --preserve-env"

log() {
    local lvl="${2:-INFO}"
    echo "[$lvl] $1"
}

function print_error() {
    echo -e 1>&2 "${RED}$@${RESET}"
}

function install_sb() {
    local path="$(find $SB_DIR -type d -name $1)"

    if [ -n "$path" ]; then
        slackbuild "$path"
        if [[ $? -ne 0 ]]; then
            echo 1>&2 "Failed to install $path"
        fi
    fi
}

function is_sb_installed() {
    local current_version="$(find /var/log/packages/ -name "${1}-*")"

    if [ -n "$current_version" ]; then
        #echo 1>&2 "$1 already installed: $current_version"
        echo 0
    else
        echo 2
    fi
}

function print_help() {
    echo 1>&2 "Usage: $(basename $0) <slackbuild [.tar.gz]>"
    echo -ne 1>&2 "\nThe slackbuild can be either an archive downloaded from "
    echo -e 1>&2 "slackbuilds.org\nor a directory from the slackbuilds repository."
    exit 1
}

PKG_NAME="${ARCHIVE%.tar.gz}" # take an archive from slackbuilds.com
PKG_NAME="${PKG_NAME%/}"      # or a slackbuild package directory

if [ ! -f "$ARCHIVE" -a ! -d "$PKG_NAME" ]; then
    print_error "Package not found: $PKG_NAME."
    echo
    print_help
fi

[ -f "$ARCHIVE" ] && tar xf "$ARCHIVE"

cd $PKG_NAME
PKG="$(basename "$PKG_NAME")"
is_installed=$(is_sb_installed "$PKG")

if [[ 0 -eq $is_installed ]]; then
    print_error "$PKG already installed, skipping"
    exit 0
fi

source $PKG.info

if [ -n "$REQUIRES" ]; then
    for dependency in $REQUIRES; do
        is_installed=$(is_sb_installed $dependency)

        if [[ 0 -ne $is_installed ]]; then
            log "Installing dependency: $dependency"
            install_sb "$dependency"
        else
            log "$dependency already installed"
        fi
    done
fi

# check if DOWNLOAD_x86_64 is configured
if [ "$DOWNLOAD" == "UNSUPPORTED" -a -n "$DOWNLOAD_x86_64" ]; then
    DOWNLOAD="$DOWNLOAD_x86_64"
fi

if [ -z "$DOWNLOAD" ]; then
    print_error "No DOWNLOAD source"
    exit 1
fi

if [ ! -f "$(basename $DOWNLOAD)" ]; then
    log "Downloading source from: $DOWNLOAD" "DEBUG"
    wget --continue $DOWNLOAD
    if [ $? -ne 0 ]; then
        print_error "Something went wrong with wget"
        exit 1
    fi
else
    log "Source found"
fi

log "Running slack build script"
notify-send "Slackbuild" "Runnind buld script for $PKG. May need password"
$SUDO bash "./${PKG}.SlackBuild"
log "Installing package"
notify-send "Slackbuild" "Installing $PKG. May need password"
$SUDO /sbin/upgradepkg --install-new /tmp/${PRGNAM}-*.tgz
