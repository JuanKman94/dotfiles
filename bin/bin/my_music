#!/usr/bin/env ruby
# frozen_string_literal: true

require "stringio"
require "thor"

class Song
  attr_reader :artist, :album, :name, :track, :filename

  def initialize(artist:, album:, name:, track:, filename:)
    @artist = artist
    @album = album
    @name = name
    @track = track
    @filename = filename
  end

  def to_s
    new_name
  end

  def new_filename
    "#{File.dirname(@filename)}/#{new_name}"
  end

  private

  def new_name
    name = ::StringIO.new

    name << "#{padded_track}. " unless @track.nil?
    name << "#{@artist} - " unless @artist.nil?
    name << "#{@name}" unless @name.nil?
    name << File.extname(@filename) unless @filename.nil?

    name.string
  end

  def padded_track
    "%02d" % @track
  end
end

class MyMusic < Thor
  AUDIO_EXTENSIONS = [
    ".aac",
    ".m4a",
    ".mp3",
    ".ogg",
  ].freeze

  desc "my_music DIRECTORY", "Rename files inside DIRECTORY"
  method_option :artist, aliases: "-a", desc: "Specify album artist for files inside DIRECTORY"
  method_option :album, aliases: "-b", desc: "Specify album for files inside DIRECTORY"
  def rename(directory)
    album = options[:album] || extract_album(directory)
    artist = options[:artist] || extract_artist(directory)
    songs = []

    Dir["#{directory}/*"]
      .select { |file| is_audio_file?(file) }
      .each do |file|
        filename = File.basename(file)
        track = 0

        while track == 0 do
          print "Track for '#{filename}': "
          track = STDIN.gets.chomp.to_i
        end

        songs << Song.new(
          artist: artist,
          album: album,
          filename: file,
          track: track,
          name: filename.sub(File.extname(filename), "")
        )
      end

    songs
      .sort { |a,b| a.track <=> b.track }
      .each do |song|
        print "Rename '#{File.basename(song.filename)}' => '#{song}'? [y/N]: "
        confirmation = STDIN.gets.chomp

        if confirmation == "y"
          File.rename(song.filename, song.new_filename)
        end
      end
  end

  def self.exit_on_failure?
    true
  end

  private

  def extract_album(directory)
    File.basename(directory)
  end

  def extract_artist(directory)
    File.basename(File.dirname(directory))
  end

  def is_audio_file?(filename)
    AUDIO_EXTENSIONS.include?(File.extname(filename))
  end
end

MyMusic.start(ARGV)
