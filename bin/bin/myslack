#!/usr/bin/env ruby

require "debug"
require "digest"
require "dotenv"
require "fileutils"
require "find"
require "net/http"

PACKAGES_PATH = "/var/lib/pkgtools/packages/"
SLACKBUILDS_DIR = "/opt/slackbuilds"
RESET = "\033[0m"
COLORS = Hash.new(RESET).merge({
  debug: "\033[0;35m",
  info: "\033[0;32m",
  warn: "\033[0;33m",
  error: "\033[0;31m"
}).freeze
USE_COLOR = [nil, ""].include?(ENV["NO_COLOR"])

# This class is a representation for the arguments passed via
# the command line.
#
# @!attribute [rw] packages
#   @return [Hash<String, String>] Key is package name and
#     value would be file path, if it exists.
# @!attribute [rw] uid
#   @return [String] Expected to be output of <code>id -u</code>
MySlack = Struct.new(
  :action,
  :packages,
  :confirmation,
  :look_up,
  :skip_dependencies,
  :skip_md5,
  :uid,
  :verbose,
  keyword_init: true
) do
  # Set path as _value_ to each _key_ in <code>packages</code>
  #
  # Depending on the action the name match criteria will change.
  def name2path!
    keys = packages.keys
    re = if action == "search"
      Regexp.new(/\A.*(?:#{keys.join("|")}).*\z/)
     else
      nil
     end

    Find.find(SLACKBUILDS_DIR) do |path|
      next if !FileTest.directory?(path)

      pkg = File.basename(path)
      if action == "search"
        next if !re.match(pkg)
      else
        next if !keys.include?(pkg)
      end

      packages[pkg] = path
    end
  end

  def needs_privileges? = self.uid != "0"
end

Slackbuild = Struct.new(
  :prgnam,
  :version,
  :homepage,
  :download,
  :download_x86_64,
  :md5sum,
  :md5sum_x86_64,
  :requires,
  :maintainer,
  :email,
  :path,
  keyword_init: true
) do
  # @param path [String, nil]
  # @return [Slackbuild, nil]
  def self.from_path(path)
    return nil if path.nil? || path.empty?

    vars = Dotenv.parse("#{path}/#{File.basename(path)}.info")

    new(**vars.transform_keys { |k| k.downcase.to_sym }.merge(path: path))
  end

  # @return [Boolean]
  def installed?
    Find.find(PACKAGES_PATH) do |path|
      next if FileTest.directory?(path)

      pkg = File.basename(path)
      next if pkg.start_with?(".")

      return true if pkg.start_with?("#{prgnam}-")
    end
  end

  # @return [Array<Slackbuild>]
  def dependencies = @dependencies ||= requires
    .split
    .map { |dep| Slackbuild.from_path(find_slackbuild(dep)) }
    .compact

  # @return [Array<String>]
  def md5sums = md5sum_x86_64.empty? ? md5sum.split : md5sum_x86_64.split

  # @return [Array<String>]
  def urls = download_x86_64.empty? ? download.split : download_x86_64.split

  # @return [Array<String>]
  def downloads = @downloads ||= []

  def to_s = "#{self.prgnam} #{self.installed? ? "âœ“" : ""}"

  def install!(action: nil, use_sudo: false, skip_dependencies: false)
    if installed?
      log "#{prgnam} already installed, skipping...", :warn
      return
    end

    if !skip_dependencies
      dependencies.each { |dependency| dependency.install!(use_sudo:,  action:) }
    end

    log "Installing #{prgnam}..."
    FileUtils.cd(path) do
      urls.zip(md5sums).each do |url, md5|
        basename = File.basename(url)
        fetch(url, md5, basename)
        downloads << basename
      end

      if !pkg_file || File.exist?(pkg_file)
        log "Running slack build script"
        command = ["sh", "#{path}/#{prgnam}.SlackBuild"]
        command.unshift("sudo") if use_sudo
        res = system(*command)

        if !res
          fail "Could not build #{prgnam}"
        end
      else
        log "#{pkg_file} found, skipping build", :debug
      end

      command = ["sh", "/sbin/upgradepkg", "--install-new", pkg_file]
      command.unshift("sudo") if use_sudo
      res = system(*command)

      if !res
        fail "Could not install #{prgnam}"
      end

      FileUtils.rm(downloads)
    end
  end

  # Find package file in <code>/tmp</code> from a Regexp
  #
  # The cache here is intentional, we may want to look for the file at
  # multiple times until found.
  #
  # @return [String]
  def pkg_file
    @pkg_file_pattern ||= Regexp.new("#{prgnam}-#{version}-.*_SBo.tgz")
    @pkg_file ||= begin
      Find.find("/tmp") do |path|
        next if FileTest.directory?(path)
        return path if path.match?(@pkg_file_pattern)
      end
    end
  end
end

# @param slackbuild [Slackbuild]
# @param level [Integer]
def print_dependency_tree(slackbuild, level = 0)
  slackbuild.dependencies.each do |dep_slackbuild|
    puts (" " * level) + "* #{dep_slackbuild}"
    print_dependency_tree(dep_slackbuild, level + 2) unless slackbuild.dependencies.empty?
  end
end

# TODO: enforce SSL
# @param url [String]
# @param md5sum [String]
# @param basename [String] Name used to save downloaded file in <code>PWD</code>
# @param limit [Integer] Limit of redirections to follow
def fetch(url, md5sum, basename, limit = 5)
  raise RuntimeError, "Too many HTTP redirects" if limit == 0

  log "Fetching #{basename} -> #{url}"
  if File.exist?(basename)
    return if md5sum == Digest::MD5.file(basename).to_s

    log "MD5 sum does not match for existing file, downloading again...", :warn
  end

  resp = Net::HTTP.get_response(URI(url))

  if resp.is_a?(Net::HTTPRedirection)
    return fetch(resp["Location"], md5sum, basename, limit - 1)
  end

  raise "Invalid MD5 sum!" if md5sum != Digest::MD5.hexdigest(resp.body)

  File.write(basename, resp.body)
end

def log(message, level = :info)
  if USE_COLOR
    puts "[#{COLORS[level]}#{level.to_s.upcase}#{RESET}] #{message}"
  else
    puts "[#{level.to_s.upcase}] #{message}"
  end
end

# @param name [String]
def find_slackbuild(name)
  Find.find(SLACKBUILDS_DIR) do |path|
    next if path.start_with?(".")
    next if !FileTest.directory?(path)

    return path if File.basename(path) == name
  end

  nil
end

def print_file(fname, print_header: false, verbose: false)
  if !File.exist?(fname)
    log("File not found: #{fname}", :warn) if verbose
    return
  end

  puts "\n#{"-"*32}| #{File.basename(fname)} |#{"-"*32}\n" if print_header
  puts File.read(fname)
end

my_slack = MySlack.new(
  action: "search",
  look_up: true,
  packages: {},
  skip_dependencies: false,
  skip_md5: false,
  uid: `id -u`.chomp
)

ARGV.each do |arg|
  case arg
  when "d", "desc"
    my_slack.action = "desc"
  when "info"
    my_slack.action = "info"
  when "i", "install"
    my_slack.action = "install"
  when "r", "reinstall"
    my_slack.action = "reinstall"
  when "s", "search"
    my_slack.action = "search"
  when "u", "upgrade"
    my_slack.action = "upgrade"
  when "-d", "--do-not-lookup"
    my_slack.look_up = false
  when "-s", "--skip-dependencies"
    my_slack.skip_dependencies = true
  when "--skip-md5"
    my_slack.skip_md5 = true
  when "-v", "--verbose"
    my_slack.verbose = true
  when "-y", "--yes"
    my_slack.confirmation = "y"
  else
    my_slack.packages[arg] = nil
  end
end

if my_slack.look_up
  my_slack.name2path!
else
  # a full path was passed instead of a name
  my_slack.packages.each_pair { |key, _value| my_slack.packages[key] = key }
end

case my_slack.action
when "desc", "search"
  my_slack.packages.each_pair do |package, path|
    if path.nil?
      log "Slackbuild not found: #{package}", :error
    else
      puts "#{package} =================================================== #{path}"
      if File.exist?("#{path}/slack-desc")
        File.read("#{path}/slack-desc")
          .lines
          .uniq
          .select { |line| line.start_with?(package) }
          .each { |line| puts line.sub("#{package}:", "#") }
      else
        log "No slack-desc file", :warn
      end
      puts
    end
  end
when "info"
  my_slack.packages.each_pair do |package, path|
    if path.nil?
      log "Package not found: #{package}", :warn
      next
    end

    puts "#{package} =================================================== #{path}"
    print_file("#{path}/#{package}.info")
    print_file("#{path}/README.SLACKWARE", print_header: true)
    print_file("#{path}/README.SBo", print_header: true)
    print_file("#{path}/README", print_header: true)
  end
when "install", "reinstall", "upgrade"
  my_slack.packages.each_pair do |package, path|
    if !FileTest.directory?(path || "")
      log "Could not find slackbuild for #{package}", :error
      next
    end

    slackbuild = Slackbuild.from_path(path)
    puts "Package: #{slackbuild.prgnam} (#{slackbuild.version}) #{slackbuild.dependencies.empty? ? "-- no dependencies" : ""}"

    if slackbuild.installed?
      log "#{package} already installed, skipping...", :warn
      next
    else
      unless slackbuild.dependencies.empty?
        puts "  Dependencies:"
        print_dependency_tree(slackbuild, 4)
      end

      if !my_slack.confirmation
        print "Go ahead with installation? [y/N]: "
        my_slack.confirmation = STDIN.gets.chomp == "y"
      end

      if my_slack.confirmation
        slackbuild.install!(action: my_slack.action, use_sudo: my_slack.needs_privileges?)
      end
    end
  end
end
